package com.kryptnostic.bitwise;

import java.util.Arrays;

import cern.colt.bitvector.BitVector;

import com.google.common.base.Function;
import com.google.common.collect.Iterables;

public final class BitVectors {
	private BitVectors() {}
	private final static Function<BitVector,BitVector> cloner = new Function<BitVector,BitVector>() {
        @Override
        public BitVector apply(BitVector input) {
            return input.copy();
        }
    };
    
    /**
     * Returns an iterable that allow lazy evaluation of the cloning functions for efficient
     * use of Guava collection factory methods. 
     * @param vectors
     * @return
     */
    public static Iterable<BitVector> cloneToIterable( BitVector ... vectors ) { 
    	return Iterables.transform( Arrays.asList( vectors ) , cloner); 	
    }
    
    /**
     * Performs a deep clone of Monomial class.
     * @param vectors to clone
     * @return An array of monomials generated by calling {@link BitVector#clone()} on each element in {@code monomials}
     */
    public static BitVector[] deepCloneBitvectorArray( BitVector ... vectors ) { 
    	BitVector[] copies = new BitVector[ vectors.length ];
    	for( int i = 0 ; i < vectors.length ; ++i ) { 
    		copies[ i ] = vectors[ i ].copy();
    	}
    	return copies;
    }
}
